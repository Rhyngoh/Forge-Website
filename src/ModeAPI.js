const ModeAPI = {
	modes: [
		{
			number: 1,
			name: 'Crafting',
			description: '<p>The goal of the crafting puzzle is to create a weapon by scoring enough points to <b>complete 3 moulds</b> before losing all of your hearts.</p><p>Scoring is based on how much of the board is cleared and bonus points are rewarded upon a certain order of squares hit in a sequence.<br>Higher scores may yield better rewards but be wary as a score too low will not be rewarded.</p><p>There are 3 different moulds (shown below)</p><img src="/images/crafting-moulds.png" alt="Crafting Moulds Example"><p>In order to create a mould, the player must score enough points. The amount of poinds needed to craft a mould increases as the difficulty of the puzzle increases and score above the requirement influences the rarity of the weapon created.<br><br>The player can set which type of mould they would like to make by selecting it. If the player has no more moves available to them and have scored enough points to create a mould, the mould selected will be created and a new board will be made.<br><br>If the player has no more moves available and has not scored enough points to create a mould, the player will lose a heart and every empty space on the board will have a new piece in its place. The player can then continue playing and scoring points until they have earned enough points to create a mould.</p><img src="/images/crafting-select-mould.png" alt="Select Mould"><p>Once the player has scored enough points to create a mould, the player can choose to complete the mould by clicking on the <b>Craft!</b> button.</p><p>The crafting session ends when the player has completed 3 moulds or if the player has lost all of their hearts. <b>A weapon is crafted if the player has completed 3 moulds!</b>. The player will be rewarded a great amount of gold and experience for their work in addition to acquiring a new weapon. The combination of moulds used will influence which type of weapon is created.</p><p>There are a total of <b>16</b> different types of weapons!</p><p>If the player has lost all of their hearts, <b>the player will still be rewarded with some gold and experience</b> for their work. Don\'t give up Forgemaster!'
		},
		{
			number: 2,
			name: 'Explore',
			description: '<p>Explore the land and defeat as many enemies as possible.</p><p>The player can use the <b>weapons</b> created from Crafting mode or purchase from a shop. They can also <b>select a hero</b> to adventure.</p><p><b>The more enemies the player defeats, the greater their rewards.</b></p><p>Each level or difficulty has a number of rounds or monsters that need to be defeated in order to progress. The board only has <b>one</b> "layer" of heat, so every explore puzzle board is made up of only 36 tiles.</p><p>The player\'s damage is directly related to their score, the selected hero, and equipped weapon. The player may also choose to attack early by clicking on the <b>Attack!</b> button.</p><p>When exploring, each tile will have a color corresponding to their element. There are 6 different colors: <b>Fire, Water, Wood, Light, Dark, and Heart</b>. Each element has an element they are strong against and an element they are weak against.</p><img src="/images/explore-elements.png" alt="Explore Mode Elemental Attributes"><p>The last colored tile is a <b>heart tile</b>. It will not add any damage to an attack; instead, it will heal the player.</p><img src="/images/explore-heart.png" alt="Explore Heart Tile"><p>The amount recovered depends on the player\'s recovery stats, the number of heart-colored tiles they have hit, and the score of the attack. When hitting heart-colored tiles, they will still contribute toward score; however, they will not contribute towards damage calculations.</p><img src="/images/explore-example.png" alt="Explore Example board"><p>When the player attacks, only the empty space (tiles used in the attack) will generate new pieces. Every other piece that was not used and the new pieces created will be available for the next attack.</p><p>There are two skill buttons that can be used during exploring. Both skills are selected before entering the explore puzzle. The <b>player\'s active skill</b> (set from the INN > SKILLS) and the <b>hero\'s banner active skill</b> (tied to the hero\'s banner)</p><p>Skills have a charge-up period that is denoted by the red number over the skill button. The player can gain a charge for both skills by clearing pieces on the board.</p><p>The player is rewarded some gold and experience for every monster defeated.</p>'
		},
		{
			number: 3,
			name: 'Challenge',
			description: '<p>The goal of the challenge puzzle series is to earn up to 3 stars. Every challenge puzzle has a <b>preset number of pieces, a specific starting point, and a specific seal location</b></p><img src="/images/challenge-seal.png" alt="Challenge Seal"><p>Every piece is predetermined upon loading and as such <b>there is always at least one way of solving each challenge.</b><p><p>Upon striking the seal piece, the challenge session ends.</p><p>In this game mode, there is also the option to <b>undo</b> the last move taken when attempting the challenge puzzles. The number of undo attempts is endless but this cannot be used to undo more than one move at a time.</p><p>The objective of the challenge puzzle series is to accomplish 3 goals:</p><ul><li>The first star is earned by hitting the <b>seal</b>. The seal has no further moves and it will end the current challenge playthrough.</li><li>The second star is earned by scoring at least a <b>certain amount of points</b>. The normal rules of scoring apply (Performing a combo will yield significantly more points than striking random pieces)</li><li>The third star is earned by completely clearing the board of tiles. Every challenge puzzle has at least one way to <b>completely clear the board</b>.</li></ul><p>It is also possible to clear the board and not score enough points to earn the score star. A proper Forgemaster knows the critical points to hammer!</p>'
		}
	],
	all: function() {
		return this.modes;
	},
	get: function(name) {
		const isMode = p => p.name === name;
		console.log(this.modes.find(isMode));
		console.log(name);
		return this.modes.find(isMode)
	}
}

export default ModeAPI;